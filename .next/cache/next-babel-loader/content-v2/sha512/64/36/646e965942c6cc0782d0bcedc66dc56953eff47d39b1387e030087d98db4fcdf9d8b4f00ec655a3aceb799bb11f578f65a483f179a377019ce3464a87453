{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/raducimpian/Projects/personal-website/components/TechStackCardAnimated/TechStackCardAnimated.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { interpolate, animated, useSprings } from 'react-spring';\nimport { Box, Text } from '@chakra-ui/react';\nimport { TECH_CARDS } from '../../constants';\nimport styles from './TechStackCardAnimated.module.css';\nimport { useColorMode } from '@chakra-ui/react'; // These two are just helpers, they curate spring data, values that are later being interpolated into css\n\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\n\nconst from = i => ({\n  x: 0,\n  y: -70,\n  rot: 0,\n  scale: 1.2,\n  y: -1000\n}); // This is being used down there in the view, it interpolates rotation and scale into a css transform\n\n\nconst trans = (r, s) => `perspective(0px) rotateX(30deg) rotateY(${r / 10}deg) rotateZ(${r}deg) scale(${s})`;\n\nexport const TechStackCardAnimated = () => {\n  const {\n    colorMode\n  } = useColorMode();\n  const [springs, api] = useSprings(TECH_CARDS.length, i => _objectSpread(_objectSpread({}, to(i)), {}, {\n    from: from(i)\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: springs.map(({\n      x,\n      y,\n      rot,\n      scale\n    }, index) => {\n      const isLast = index === springs.length - 1;\n      return /*#__PURE__*/_jsxDEV(animated.div, {\n        className: styles.techStackCardContainer,\n        style: {\n          transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,-2px)`)\n        },\n        children: /*#__PURE__*/_jsxDEV(animated.div, {\n          style: {\n            transform: interpolate([rot, scale], trans)\n          },\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            padding: 4,\n            border: \"1px\",\n            borderRadius: \"sm\",\n            className: `${styles.scaled} ${!isLast && styles.rise}`,\n            backgroundColor: colorMode === 'light' ? 'pink.200' : 'pink.800',\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              width: \"fit-content\",\n              fontWeight: \"bold\",\n              children: TECH_CARDS[index].label\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)\n      }, TECH_CARDS[index].label, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false);\n};","map":{"version":3,"sources":["/Users/raducimpian/Projects/personal-website/components/TechStackCardAnimated/TechStackCardAnimated.js"],"names":["React","interpolate","animated","useSprings","Box","Text","TECH_CARDS","styles","useColorMode","to","i","x","y","scale","rot","Math","random","delay","from","trans","r","s","TechStackCardAnimated","colorMode","springs","api","length","map","index","isLast","techStackCardContainer","transform","scaled","rise","label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { interpolate, animated, useSprings } from 'react-spring';\nimport { Box, Text } from '@chakra-ui/react';\nimport { TECH_CARDS } from '../../constants';\nimport styles from './TechStackCardAnimated.module.css';\nimport { useColorMode } from '@chakra-ui/react';\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = (i) => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100,\n});\nconst from = (i) => ({ x: 0, y: -70, rot: 0, scale: 1.2, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n  `perspective(0px) rotateX(30deg) rotateY(${\n    r / 10\n  }deg) rotateZ(${r}deg) scale(${s})`;\n\nexport const TechStackCardAnimated = () => {\n  const { colorMode } = useColorMode();\n  const [springs, api] = useSprings(TECH_CARDS.length, (i) => ({\n    ...to(i),\n    from: from(i),\n  }));\n  return (\n    <>\n      {springs.map(({ x, y, rot, scale }, index) => {\n        const isLast = index === springs.length - 1;\n        return (\n          <animated.div\n            key={TECH_CARDS[index].label}\n            className={styles.techStackCardContainer}\n            style={{\n              transform: interpolate(\n                [x, y],\n                (x, y) => `translate3d(${x}px,${y}px,-2px)`\n              ),\n            }}\n          >\n            <animated.div\n              style={{\n                transform: interpolate([rot, scale], trans),\n              }}\n            >\n              <Box\n                padding={4}\n                border=\"1px\"\n                borderRadius=\"sm\"\n                className={`${styles.scaled} ${!isLast && styles.rise}`}\n                backgroundColor={\n                  colorMode === 'light' ? 'pink.200' : 'pink.800'\n                }\n              >\n                <Text width=\"fit-content\" fontWeight=\"bold\">\n                  {TECH_CARDS[index].label}\n                </Text>\n              </Box>\n            </animated.div>\n          </animated.div>\n        );\n      })}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}