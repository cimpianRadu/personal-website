{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/raducimpian/Projects/personal-website/components/SwitchWithIcons/SwitchWithIcons.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport { Text, Button, useColorModeValue } from '@chakra-ui/react';\nvar initialState = {\n  isLightTheme: true,\n  isLeftAnimation: false,\n  isRightAnimation: false\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case 'light':\n      return {\n        isLightTheme: true,\n        isLeftAnimation: false,\n        isRightAnimation: true\n      };\n\n    case 'dark':\n      return {\n        isLightTheme: false,\n        isLeftAnimation: true,\n        isRightAnimation: false\n      };\n\n    default:\n      return initialState;\n  }\n};\n\nexport var SwithWithIcons = function SwithWithIcons(_ref) {\n  _s();\n\n  var _ref$leftIcon = _ref.leftIcon,\n      leftIcon = _ref$leftIcon === void 0 ? 'ðŸŒž' : _ref$leftIcon,\n      _ref$rightIcon = _ref.rightIcon,\n      rightIcon = _ref$rightIcon === void 0 ? 'ðŸŒ™' : _ref$rightIcon,\n      _ref$onChange = _ref.onChange,\n      onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n      _ref$ariaLabel = _ref.ariaLabel,\n      ariaLabel = _ref$ariaLabel === void 0 ? '' : _ref$ariaLabel;\n\n  var _useReducer = useReducer(reducer, initialState),\n      state = _useReducer[0],\n      dipatch = _useReducer[1];\n\n  var switchBackgroundColor = useColorModeValue('blue.900', 'orange.100');\n\n  var onSetTheme = function onSetTheme() {\n    if (state.isLightTheme) {\n      dipatch({\n        type: 'dark'\n      });\n    }\n\n    if (!state.isLightTheme) {\n      dipatch({\n        type: 'light'\n      });\n    }\n\n    onChange();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      padding: 1,\n      borderRadius: \"base\",\n      background: switchBackgroundColor,\n      \"aria-label\": ariaLabel,\n      onClick: onSetTheme,\n      _hover: switchBackgroundColor,\n      _focus: {\n        borderColor: 'transparent'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        display: state.isLightTheme ? 'visible' : 'none',\n        fontSize: \"2xl\",\n        children: rightIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Text, {\n        display: state.isLightTheme ? 'none' : 'visible',\n        fontSize: \"2xl\",\n        children: leftIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false);\n};\n\n_s(SwithWithIcons, \"lJ0zMJGL9FqJTFxTx+LLmG0lfHw=\", false, function () {\n  return [useColorModeValue];\n});\n\n_c = SwithWithIcons;\n\nvar _c;\n\n$RefreshReg$(_c, \"SwithWithIcons\");","map":{"version":3,"sources":["/Users/raducimpian/Projects/personal-website/components/SwitchWithIcons/SwitchWithIcons.js"],"names":["useReducer","Text","Button","useColorModeValue","initialState","isLightTheme","isLeftAnimation","isRightAnimation","reducer","state","action","type","SwithWithIcons","leftIcon","rightIcon","onChange","ariaLabel","dipatch","switchBackgroundColor","onSetTheme","borderColor"],"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,iBAAvB,QAAgD,kBAAhD;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,YAAY,EAAE,IADK;AAEnBC,EAAAA,eAAe,EAAE,KAFE;AAGnBC,EAAAA,gBAAgB,EAAE;AAHC,CAArB;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO;AACLN,QAAAA,YAAY,EAAE,IADT;AAELC,QAAAA,eAAe,EAAE,KAFZ;AAGLC,QAAAA,gBAAgB,EAAE;AAHb,OAAP;;AAKF,SAAK,MAAL;AACE,aAAO;AACLF,QAAAA,YAAY,EAAE,KADT;AAELC,QAAAA,eAAe,EAAE,IAFZ;AAGLC,QAAAA,gBAAgB,EAAE;AAHb,OAAP;;AAKF;AACE,aAAOH,YAAP;AAdJ;AAgBD,CAjBD;;AAkBA,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,OAKxB;AAAA;;AAAA,2BAJJC,QAII;AAAA,MAJJA,QAII,8BAJO,IAIP;AAAA,4BAHJC,SAGI;AAAA,MAHJA,SAGI,+BAHQ,IAGR;AAAA,2BAFJC,QAEI;AAAA,MAFJA,QAEI,8BAFO,YAAM,CAAE,CAEf;AAAA,4BADJC,SACI;AAAA,MADJA,SACI,+BADQ,EACR;;AAAA,oBACqBhB,UAAU,CAACQ,OAAD,EAAUJ,YAAV,CAD/B;AAAA,MACGK,KADH;AAAA,MACUQ,OADV;;AAEJ,MAAMC,qBAAqB,GAAGf,iBAAiB,CAAC,UAAD,EAAa,YAAb,CAA/C;;AAEA,MAAMgB,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAIV,KAAK,CAACJ,YAAV,EAAwB;AACtBY,MAAAA,OAAO,CAAC;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAP;AACD;;AACD,QAAI,CAACF,KAAK,CAACJ,YAAX,EAAyB;AACvBY,MAAAA,OAAO,CAAC;AAAEN,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAP;AACD;;AACDI,IAAAA,QAAQ;AACT,GARD;;AAUA,sBACE;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,OAAO,EAAE,CADX;AAEE,MAAA,YAAY,EAAC,MAFf;AAGE,MAAA,UAAU,EAAEG,qBAHd;AAIE,oBAAYF,SAJd;AAKE,MAAA,OAAO,EAAEG,UALX;AAME,MAAA,MAAM,EAAED,qBANV;AAOE,MAAA,MAAM,EAAE;AAAEE,QAAAA,WAAW,EAAE;AAAf,OAPV;AAAA,8BASE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAEX,KAAK,CAACJ,YAAN,GAAqB,SAArB,GAAiC,MAAhD;AAAwD,QAAA,QAAQ,EAAC,KAAjE;AAAA,kBACGS;AADH;AAAA;AAAA;AAAA;AAAA,eATF,eAYE,QAAC,IAAD;AAAM,QAAA,OAAO,EAAEL,KAAK,CAACJ,YAAN,GAAqB,MAArB,GAA8B,SAA7C;AAAwD,QAAA,QAAQ,EAAC,KAAjE;AAAA,kBACGQ;AADH;AAAA;AAAA;AAAA;AAAA,eAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAoBD,CAvCM;;GAAMD,c;UAOmBT,iB;;;KAPnBS,c","sourcesContent":["import { useReducer } from 'react';\nimport { Text, Button, useColorModeValue } from '@chakra-ui/react';\n\nconst initialState = {\n  isLightTheme: true,\n  isLeftAnimation: false,\n  isRightAnimation: false,\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'light':\n      return {\n        isLightTheme: true,\n        isLeftAnimation: false,\n        isRightAnimation: true,\n      };\n    case 'dark':\n      return {\n        isLightTheme: false,\n        isLeftAnimation: true,\n        isRightAnimation: false,\n      };\n    default:\n      return initialState;\n  }\n};\nexport const SwithWithIcons = ({\n  leftIcon = 'ðŸŒž',\n  rightIcon = 'ðŸŒ™',\n  onChange = () => {},\n  ariaLabel = '',\n}) => {\n  const [state, dipatch] = useReducer(reducer, initialState);\n  const switchBackgroundColor = useColorModeValue('blue.900', 'orange.100');\n\n  const onSetTheme = () => {\n    if (state.isLightTheme) {\n      dipatch({ type: 'dark' });\n    }\n    if (!state.isLightTheme) {\n      dipatch({ type: 'light' });\n    }\n    onChange();\n  };\n\n  return (\n    <>\n      <Button\n        padding={1}\n        borderRadius=\"base\"\n        background={switchBackgroundColor}\n        aria-label={ariaLabel}\n        onClick={onSetTheme}\n        _hover={switchBackgroundColor}\n        _focus={{ borderColor: 'transparent' }}\n      >\n        <Text display={state.isLightTheme ? 'visible' : 'none'} fontSize=\"2xl\">\n          {rightIcon}\n        </Text>\n        <Text display={state.isLightTheme ? 'none' : 'visible'} fontSize=\"2xl\">\n          {leftIcon}\n        </Text>\n      </Button>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}